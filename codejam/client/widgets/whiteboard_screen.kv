<CLabel@Label>:
    canvas.before:
        Color:
            rgb: .2, .5, .9
        Rectangle:
            pos: self.pos
            size: self.size

<CButton@ButtonBehavior+Label>:
    colour: .2, .5, .9
    canvas.before:
        Color:
            rgb: self.colour or (0, 0, 0)
        RoundedRectangle:
            pos: self.pos
            size: self.size

<ToolButton@CButton>:
    colour: (.5, .2, .9) if self.parent.pressed == self else (.2, .5, .9)
    on_release:
        self.parent.pressed = self
        self.parent.root._canvas.tool = self.text
        self.parent.root._canvas.line_width = self.parent.root.ids.slider.value
        self.parent.root._canvas.colour = self.parent.root.ids.color_picker.value, 1, 1

<WhiteBoardScreen>:
    id: wbs
    cvs: canvas
    message: ''
    received: ''
    label_y : 1
    left_x: 0
    right_x: .95
    bottom_y: 0
    bg_color: .3, .2, .1
    canvas:
        Color:
            hsv: self.bg_color or (0, 0, 0)
        Rectangle:
            pos: self.pos
            size: self.size
    DrawCanvas:
        screen: root
        pos_hint: {'center_x': .5, 'center_y': .5}
        offset_x: 0
        offset_y: 0
        id: canvas
        size_hint: None, None
        size: 400, 400
        draw_mark: .1, .2, .3
        line_width: 2
        canvas.before:
            Color:
                hsv: self.draw_mark or (.1, .2, .3)
            Rectangle:
                pos: self.x + self.offset_x, self.y + self.offset_y
                size: self.size
    CLabel
        id: label
        size_hint_y: .1
        pos_hint: {'y': root.label_y}
        color: .5, .9, .2
        font_size: dp(10)
        text_size: self.width, None
        texture_size: self.size
        halign: 'center'
        text: root.received
    CanvasTools:
        size_hint: .6, .2
        id: tools
        _canvas: canvas
        pos_hint: {'top': root.bottom_y, 'center_x': .5}
    Instructions:
        _canvas: canvas
        size_hint: .2, .6
        pos_hint: {'right': root.left_x, 'center_y': .5}
    ChatWindow:
        id: chat_window
        username: root.manager.username
        screen: root
        size_hint: .25, .6
        pos_hint: {'x': root.right_x, 'center_y': .5}
        orientation: 'vertical'
        opacity: .75
    Counter:
        id: counter
        size_hint_y: .1
        pos_hint: {'top': .95, 'center_x': .5}
        text: "WAITING FOR START"
        color: .5, .9, .2
        font_size: dp(20)


<Instructions>:
    orientation: 'vertical'
    spacing: dp(5)
    padding: dp(5)
    Widget:
        id: color_picker
        value: 0
        canvas.before:
            Color:
                hsv: self.value, 1, 1
            Rectangle:
                size: self.size
                pos: self.pos
        on_value: root._canvas.colour = self.value, 1, 1
        on_touch_down:
            self.value = args[1].x/self.right if self.collide_point(*args[1].pos) else self.value # *can bug*
    BoxLayout:
        orientation: 'vertical'
        Label:
            text: str(slider.value)
        Slider:
            id: slider
            opacity: 1
            color: .2, .5, .9
            value: 2
            background_width: 0
            value_track: True
            value_track_color: .2, .5, .9
            value_track_width: dp(10)
            min: 1
            max: 50
            step: 1
            on_value: root._canvas.line_width = self.value
    GridLayout:
        cols: 2
        id: tools
        spacing: dp(5)
        padding: dp(5)
        pressed: None
        root: root
        ToolButton:
            text: 'line'
        ToolButton:
            text: 'rect'
        ToolButton:
            text: 'frame'
    CButton:
        text: 'eraser'
        active: False
        colour: (.5, .2, .9) if tools.pressed == self else (.2, .5, .9)
        on_release:
            self.active = not self.active
            tools.pressed = self
            root._canvas.line_width = 10
            root._canvas.tool = 'line'
            root._canvas.colour = root._canvas.draw_mark

<CanvasTools>:
    padding: dp(5)
    spacing: dp(5)
    BoxLayout:
        spacing: dp(5)
        orientation: 'vertical'
        CButton:
            text: 'inc width'
            on_release:
                root._canvas.width += 5
        CButton:
            text: 'dec width'
            on_release:
                root._canvas.width -= 5
    BoxLayout:
        spacing: dp(5)
        orientation: 'vertical'
        CButton:
            text: 'inc height'
            on_release:
                root._canvas.height += 10
        CButton:
            text: 'dec height'
            on_release:
                root._canvas.height -= 10
    BoxLayout:
        spacing: dp(5)
        orientation: 'vertical'
        CButton:
            text: 'right'
            on_release:
                root._canvas.offset_x += 10
        CButton:
            text: 'left'
            on_release:
                root._canvas.offset_x -= 10
    BoxLayout:
        spacing: dp(5)
        orientation: 'vertical'
        CButton:
            text: 'up'
            on_release:
                root._canvas.offset_y += 10
        CButton:
            text: 'down'
            on_release:
                root._canvas.offset_y -= 10

<InfoPopup>:
    auto_dismiss: False
    size_hint: 0.6, 0.2
    pos_hint: {"x": 0.2 ,"top": 0.9}
    title: "Error Title"
    additional_message: "Error Code"
    message: "Error Message"
    header: "Error encountered!"
    BoxLayout:
        size_hint: None, None
        orientation: "vertical"
        Label:
            text: root.header
        Widget:
        Label:
            text: root.title
            halign: "left"
        Label:
            text: root.message
            halign: "left"
        Label:
            text: root.additional_message
            halign: "left"
        Button:
            text: "Close"
            on_release: root.dismiss()
