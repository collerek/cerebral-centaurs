#:import A kivy.animation.Animation
<CLabel@Label>:
    canvas.before:
        Color:
            rgb: .2, .5, .9
        Rectangle:
            pos: self.pos
            size: self.size

<CButton@ButtonBehavior+Label>:
    colour: (.5, .2, .9) if self.state == 'down' else (.2, .5, .9)
    background_color: 0, 0, 0, 1
    font_size: sp(15)
    canvas.before:
        Color:
            rgb: self.colour or (0, 0, 0)
        Line:
            width: 2
            rectangle: self.x, self.y, self.width, self.height

<ToolButton@CButton>:
    colour: (.5, .2, .9) if self.parent.pressed == self else (.2, .5, .9)
    on_release:
        self.parent.pressed = self
        self.parent.root._canvas.tool = self.text
        self.parent.root._canvas.line_width = self.parent.root.ids.slider.value
        self.parent.root._canvas.colour = self.parent.root.ids.color_picker.value, 1, 1

<WhiteBoardScreen>:
    id: wbs
    cvs: canvas
    current_phrase: current_phrase
    message: ''
    second_message: ''
    received: ''
    label_y : 1
    left_x: 0
    right_x: .95
    bottom_y: 0
    bg_color: .3, .2, .1
    canvas:
        Color:
            hsv: self.bg_color or (0, 0, 0)
        Rectangle:
            pos: self.pos
            size: self.size
    DrawCanvas:
        screen: root
        pos_hint: {'center_x': .5, 'center_y': .5}
        offset_x: 0
        offset_y: 0
        id: canvas
        size_hint: None, None
        size: 400, 400
        draw_mark: .1, .2, .3
        line_width: 2
        angle: 0
        canvas.before:
            PushMatrix
            Rotate:
                angle: self.angle
                axis: 0, 0, 1
                origin: self.center
            Color:
                hsv: self.draw_mark or (.1, .2, .3)
            Rectangle:
                pos: self.x + self.offset_x, self.y + self.offset_y
                size: self.size
        canvas.after:
            PopMatrix
    CLabel:
        id: label
        size_hint_y: dp(0)
        size_hint_x: dp(0)
        pos_hint: {'y': root.label_y}
        color: .5, .9, .2
        font_size: dp(0)
        text_size: self.width, None
        texture_size: self.size
        halign: 'center'
        text: root.received
        hidden: True
        opacity: 0
    Instructions:
        _canvas: canvas
        size_hint: .2, .6
        pos_hint: {'right': root.left_x, 'center_y': .5}
    ScoreBoard:
        id: score_board
        game_id: root.manager.game_id
        pos_hint: {'right':.98, 'top':.98}
        size_hint: .22, .38
        screen: root
        username: root.manager.username
        opacity: .1 if chat_window.x < self.center_x else 1
    ChatWindow:
        id: chat_window
        screen: root
        username: root.manager.username
        size_hint: .25, .6
        pos_hint: {'x': root.right_x, 'center_y': .5}
        orientation: 'vertical'
        opacity: .9
    Counter:
        id: counter
        size_hint_y: .1
        pos_hint: {'top': .95, 'center_x': .5}
        text: "WAITING FOR START"
        color: .5, .2, .9
        font_size: dp(20)
    Label:
        id: current_phrase
        size_hint_y: .08
        pos_hint: {'top': .99, 'center_x': .5}
        text: ""
        color: .5, .2, .9
        font_size: dp(15)


<Instructions>:
    orientation: 'vertical'
    spacing: dp(5)
    padding: dp(5)
    Widget:
        id: color_picker
        size_hint: 1, 0.3
        value: 0
        canvas.before:
            Color:
                hsv: self.value, 1, 1
            Rectangle:
                size: self.size
                pos: self.pos
        on_value: root._canvas.colour = self.value, 1, 1
        on_touch_down:
            self.value = args[1].x/self.right if self.collide_point(*args[1].pos) else self.value # *can bug*
    BoxLayout:
        orientation: 'vertical'
        size_hint_y: 0.3
        Label:
            text: "Line width: " + str(slider.value)
        Slider:
            id: slider
            opacity: 1
            color: .2, .5, .9
            value: 2
            background_width: 0
            value_track: True
            value_track_color: .2, .5, .9
            value_track_width: dp(10)
            min: 1
            max: 50
            step: 1
            on_value: root._canvas.line_width = self.value
    GridLayout:
        cols: 1
        id: tools
        spacing: dp(5)
        padding: dp(5)
        pressed: None
        root: root
        ToolButton:
            text: 'line'
        ToolButton:
            text: 'rect'
        ToolButton:
            text: 'frame'
        CButton:
            text: 'eraser'
            active: False
            colour: (.5, .2, .9) if tools.pressed == self else (.2, .5, .9)
            on_release:
                self.active = not self.active
                tools.pressed = self
                root._canvas.line_width = 10
                root._canvas.tool = 'line'
                root._canvas.colour = root._canvas.draw_mark

<InfoPopup>:
    auto_dismiss: False
    size_hint: 0.6, 0.3
    pos_hint: {"x": 0.2 ,"top": 0.9}
    title: "Error Title"
    additional_message: "Error Code"
    message: "Error Message"
    header: "Error encountered!"
    BoxLayout:
        spacing: dp(5)
        padding: dp(10)
        orientation: "vertical"
        canvas.before:
            Color:
                rgb: .5, .2, .9, 1
            Line:
                width: 4
                rectangle: self.x + 2, self.y + 2, self.width - 2, self.height - 2
        Label:
            text: root.header
            font_size: sp(20)
            bold: True
        Widget:
            size_hint_y: .1
            canvas:
                Color:
                    rgb: .5, .2, .9, 1
                Rectangle:
                    size: self.size
                    pos: self.pos
        Label:
            text: root.title
            halign: "left"
        Label:
            text: root.message
            halign: "left"
        Label:
            text: root.additional_message
            halign: "left"
        BoxLayout:
            size_hint_y: .1
        CButton:
            font_size: sp(20)
            size_hint: .3, 1.2
            pos_hint: {'x': .35}
            color: .2, .5, .9
            text: "Close"
            on_release: root.dismiss()
