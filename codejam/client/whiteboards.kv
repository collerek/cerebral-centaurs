<WhiteBoardScreen>:
    wb: wb
    WhiteBoard:
        id: wb
        message: ""
        bg_color: 0, 0, 0
        canvas.before:
            Color:
                hsv: self.bg_color or (0, 0, 0)
            Rectangle:
                pos: self.pos
                size: self.size
        orientation: 'vertical'
        Label:
            color: 1, 0, 1, 1
            id: label
            size_hint_y: .25
            font_size: dp(10)
            text_size: self.width, None
            texture_size: self.size
            halign: 'center'
            text: wb.btn_text
        FloatLayout:
            canvas:
                Color:
                    hsv: .3, .2, .1
                Rectangle:
                    pos: self.pos
                    size: self.size
            TestCanvas:
                root: wb
                pos_hint: {'center_x': .5, 'center_y': .5}
                offset_x: 0
                offset_y: 0
                id: canvas
                size_hint: None, None
                size: 400, 400
                draw_mark: .1, .2, .3
                canvas.before:
                    Color:
                        hsv: self.draw_mark or (.1, .2, .3)
                    Rectangle:
                        pos: self.x + self.offset_x, self.y + self.offset_y
                        size: self.size
            CanvasTools:
                size_hint_y: .2
                id: tools
                canvas: canvas
            Instructions:
                id: instructions
                size_hint: .1, .3
                pos_hint: {'top': .9}
                canvas: canvas
            Button:
                size_hint: .05,.05
                pos_hint: {'top': 1}
                text: '>' if instructions.x < 0 else '<'
                on_release:
                    instructions.x = [-instructions.width, self.x][self.text == '>']


<CanvasTools@BoxLayout>:
    padding: dp(10)
    spacing: dp(10)
    BoxLayout:
        orientation: 'vertical'
        Button:
            text: 'inc width'
            on_release:
                root.canvas.width += 5
        Button:
            text: 'dec width'
            on_release:
                root.canvas.width -= 5
    BoxLayout:
        orientation: 'vertical'
        Button:
            text: 'inc height'
            on_release:
                root.canvas.height += 10
        Button:
            text: 'dec height'
            on_release:
                root.canvas.height -= 10
    BoxLayout:
        orientation: 'vertical'
        Button:
            text: 'right'
            on_release:
                root.canvas.offset_x += 10
        Button:
            text: 'left'
            on_release:
                root.canvas.offset_x -= 10
    BoxLayout:
        orientation: 'vertical'
        Button:
            text: 'up'
            on_release:
                root.canvas.offset_y += 10
        Button:
            text: 'down'
            on_release:
                root.canvas.offset_y -= 10
    Button:
        size_hint_x: .1
        text: '->' if root.x else '<-'
        on_release:
            root.x = -self.x



<Instructions@BoxLayout>:
    orientation: 'vertical'
    spacing: dp(5)
    padding: dp(5)
    Widget:
        value: 0
        canvas.before:
            Color:
                hsv: self.value, 1, 1
            Rectangle:
                size: self.size
                pos: self.pos
        on_value: root.canvas.colour = self.value, 1, 1
        on_touch_down:
            self.value = args[1].x/self.right if self.collide_point(*args[1].pos) else self.value # *can bug*
    BoxLayout:
        Button:
            text: '-'
            on_release:
                root.canvas.line_width -= 1
        Button:
            text: '+'
            on_release:
                root.canvas.line_width += 1
    BoxLayout:
        Button:
            text: 'line'
            on_release:
                root.canvas.tool = 'line'
        Button:
            text: 'rect'
            on_release:
                root.canvas.tool = 'rect'
    Button:
        text: 'clear'
        on_release:
            root.canvas.line_width = 10
            root.canvas.tool = 'line'
            root.canvas.colour = root.canvas.draw_mark
